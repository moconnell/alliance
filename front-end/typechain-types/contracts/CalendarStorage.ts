/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CalendarStorageInterface extends utils.Interface {
  functions: {
    "availability()": FunctionFragment;
    "dateToMeetings(uint256,uint256,uint256,uint256)": FunctionFragment;
    "profile()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "availability" | "dateToMeetings" | "profile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availability",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dateToMeetings",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "profile", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "availability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dateToMeetings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profile", data: BytesLike): Result;

  events: {};
}

export interface CalendarStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CalendarStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    availability(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, number] & {
        location: string;
        timeZone: string;
        availableDays: number;
        earliestStartMinutes: number;
        minutesAvailable: number;
      }
    >;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        attendee: string;
        startMinutes: number;
        durationMinutes: number;
      }
    >;

    profile(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        description: string;
        email: string;
        picture: string;
        url: string;
        username: string;
      }
    >;
  };

  availability(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number, number] & {
      location: string;
      timeZone: string;
      availableDays: number;
      earliestStartMinutes: number;
      minutesAvailable: number;
    }
  >;

  dateToMeetings(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      attendee: string;
      startMinutes: number;
      durationMinutes: number;
    }
  >;

  profile(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      description: string;
      email: string;
      picture: string;
      url: string;
      username: string;
    }
  >;

  callStatic: {
    availability(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, number] & {
        location: string;
        timeZone: string;
        availableDays: number;
        earliestStartMinutes: number;
        minutesAvailable: number;
      }
    >;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        attendee: string;
        startMinutes: number;
        durationMinutes: number;
      }
    >;

    profile(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        description: string;
        email: string;
        picture: string;
        url: string;
        username: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    availability(overrides?: CallOverrides): Promise<BigNumber>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profile(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    availability(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profile(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
