/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace CalendarTypes {
  export type TimeArrayStruct = { times: BigNumberish[]; timeZone: string };

  export type TimeArrayStructOutput = [number[], string] & {
    times: number[];
    timeZone: string;
  };

  export type MeetingStruct = {
    attendee: string;
    startMinutes: BigNumberish;
    durationMinutes: BigNumberish;
  };

  export type MeetingStructOutput = [string, number, number] & {
    attendee: string;
    startMinutes: number;
    durationMinutes: number;
  };

  export type ProfileStruct = {
    description: string;
    email: string;
    picture: string;
    url: string;
    username: string;
  };

  export type ProfileStructOutput = [string, string, string, string, string] & {
    description: string;
    email: string;
    picture: string;
    url: string;
    username: string;
  };

  export type AvailabilityStruct = {
    location: string;
    timeZone: string;
    availableDays: BigNumberish;
    earliestStartMinutes: BigNumberish;
    minutesAvailable: BigNumberish;
  };

  export type AvailabilityStructOutput = [
    string,
    string,
    number,
    number,
    number
  ] & {
    location: string;
    timeZone: string;
    availableDays: number;
    earliestStartMinutes: number;
    minutesAvailable: number;
  };
}

export interface CalendarInterface extends utils.Interface {
  functions: {
    "availability()": FunctionFragment;
    "bookMeeting(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "cancelMeeting(uint256,uint256,uint256,uint256)": FunctionFragment;
    "dateToMeetings(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getAvailableTimes(uint256,uint256,uint256,uint16)": FunctionFragment;
    "getMeetings(uint256,uint256,uint256)": FunctionFragment;
    "initialize(address,(string,string,string,string,string),(string,string,uint8,uint16,uint16))": FunctionFragment;
    "owner()": FunctionFragment;
    "profile()": FunctionFragment;
    "setAvailability((string,string,uint8,uint16,uint16))": FunctionFragment;
    "setProfile((string,string,string,string,string))": FunctionFragment;
    "setProfileAvailability((string,string,string,string,string),(string,string,uint8,uint16,uint16))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "availability"
      | "bookMeeting"
      | "cancelMeeting"
      | "dateToMeetings"
      | "getAvailableTimes"
      | "getMeetings"
      | "initialize"
      | "owner"
      | "profile"
      | "setAvailability"
      | "setProfile"
      | "setProfileAvailability"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availability",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bookMeeting",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMeeting",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dateToMeetings",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTimes",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeetings",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      CalendarTypes.ProfileStruct,
      CalendarTypes.AvailabilityStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "profile", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAvailability",
    values: [CalendarTypes.AvailabilityStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile",
    values: [CalendarTypes.ProfileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileAvailability",
    values: [CalendarTypes.ProfileStruct, CalendarTypes.AvailabilityStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "availability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bookMeeting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMeeting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dateToMeetings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeetings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProfileAvailability",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "MeetingBooked(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "MeetingCancelled(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeetingBooked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeetingCancelled"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MeetingBookedEventObject {
  attendee: string;
  year: BigNumber;
  month: BigNumber;
  day: BigNumber;
  hour: BigNumber;
  minute: BigNumber;
  duration: BigNumber;
}
export type MeetingBookedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MeetingBookedEventObject
>;

export type MeetingBookedEventFilter = TypedEventFilter<MeetingBookedEvent>;

export interface MeetingCancelledEventObject {
  attendee: string;
  year: BigNumber;
  month: BigNumber;
  day: BigNumber;
  hour: BigNumber;
  minute: BigNumber;
  duration: BigNumber;
}
export type MeetingCancelledEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MeetingCancelledEventObject
>;

export type MeetingCancelledEventFilter =
  TypedEventFilter<MeetingCancelledEvent>;

export interface Calendar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CalendarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    availability(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, number] & {
        location: string;
        timeZone: string;
        availableDays: number;
        earliestStartMinutes: number;
        minutesAvailable: number;
      }
    >;

    bookMeeting(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _hour: BigNumberish,
      _minute: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelMeeting(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _arrayPosition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        attendee: string;
        startMinutes: number;
        durationMinutes: number;
      }
    >;

    getAvailableTimes(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CalendarTypes.TimeArrayStructOutput]>;

    getMeetings(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CalendarTypes.MeetingStructOutput[]]>;

    initialize(
      _owner: string,
      _profile: CalendarTypes.ProfileStruct,
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    profile(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        description: string;
        email: string;
        picture: string;
        url: string;
        username: string;
      }
    >;

    setAvailability(
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfile(
      _profile: CalendarTypes.ProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfileAvailability(
      _profile: CalendarTypes.ProfileStruct,
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  availability(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number, number] & {
      location: string;
      timeZone: string;
      availableDays: number;
      earliestStartMinutes: number;
      minutesAvailable: number;
    }
  >;

  bookMeeting(
    _year: BigNumberish,
    _month: BigNumberish,
    _day: BigNumberish,
    _hour: BigNumberish,
    _minute: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelMeeting(
    _year: BigNumberish,
    _month: BigNumberish,
    _day: BigNumberish,
    _arrayPosition: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dateToMeetings(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      attendee: string;
      startMinutes: number;
      durationMinutes: number;
    }
  >;

  getAvailableTimes(
    _year: BigNumberish,
    _month: BigNumberish,
    _day: BigNumberish,
    _duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CalendarTypes.TimeArrayStructOutput>;

  getMeetings(
    _year: BigNumberish,
    _month: BigNumberish,
    _day: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CalendarTypes.MeetingStructOutput[]>;

  initialize(
    _owner: string,
    _profile: CalendarTypes.ProfileStruct,
    _availability: CalendarTypes.AvailabilityStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  profile(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      description: string;
      email: string;
      picture: string;
      url: string;
      username: string;
    }
  >;

  setAvailability(
    _availability: CalendarTypes.AvailabilityStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfile(
    _profile: CalendarTypes.ProfileStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfileAvailability(
    _profile: CalendarTypes.ProfileStruct,
    _availability: CalendarTypes.AvailabilityStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    availability(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, number] & {
        location: string;
        timeZone: string;
        availableDays: number;
        earliestStartMinutes: number;
        minutesAvailable: number;
      }
    >;

    bookMeeting(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _hour: BigNumberish,
      _minute: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelMeeting(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _arrayPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        attendee: string;
        startMinutes: number;
        durationMinutes: number;
      }
    >;

    getAvailableTimes(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CalendarTypes.TimeArrayStructOutput>;

    getMeetings(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CalendarTypes.MeetingStructOutput[]>;

    initialize(
      _owner: string,
      _profile: CalendarTypes.ProfileStruct,
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    profile(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        description: string;
        email: string;
        picture: string;
        url: string;
        username: string;
      }
    >;

    setAvailability(
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfile(
      _profile: CalendarTypes.ProfileStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfileAvailability(
      _profile: CalendarTypes.ProfileStruct,
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MeetingBooked(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      attendee?: string | null,
      year?: null,
      month?: null,
      day?: null,
      hour?: null,
      minute?: null,
      duration?: null
    ): MeetingBookedEventFilter;
    MeetingBooked(
      attendee?: string | null,
      year?: null,
      month?: null,
      day?: null,
      hour?: null,
      minute?: null,
      duration?: null
    ): MeetingBookedEventFilter;

    "MeetingCancelled(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      attendee?: string | null,
      year?: null,
      month?: null,
      day?: null,
      hour?: null,
      minute?: null,
      duration?: null
    ): MeetingCancelledEventFilter;
    MeetingCancelled(
      attendee?: string | null,
      year?: null,
      month?: null,
      day?: null,
      hour?: null,
      minute?: null,
      duration?: null
    ): MeetingCancelledEventFilter;
  };

  estimateGas: {
    availability(overrides?: CallOverrides): Promise<BigNumber>;

    bookMeeting(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _hour: BigNumberish,
      _minute: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelMeeting(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _arrayPosition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableTimes(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeetings(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _profile: CalendarTypes.ProfileStruct,
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    profile(overrides?: CallOverrides): Promise<BigNumber>;

    setAvailability(
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfile(
      _profile: CalendarTypes.ProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfileAvailability(
      _profile: CalendarTypes.ProfileStruct,
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availability(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bookMeeting(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _hour: BigNumberish,
      _minute: BigNumberish,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelMeeting(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _arrayPosition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dateToMeetings(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableTimes(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeetings(
      _year: BigNumberish,
      _month: BigNumberish,
      _day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _profile: CalendarTypes.ProfileStruct,
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAvailability(
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfile(
      _profile: CalendarTypes.ProfileStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfileAvailability(
      _profile: CalendarTypes.ProfileStruct,
      _availability: CalendarTypes.AvailabilityStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
